- hosts: localhost
  gather_facts: false
  vars_prompt:
    - name: target_host
      prompt: please enter the target host IP
      private: false
      default: "192.168.1.100"
  tasks:
    - add_host:
        name: "{{ target_host }}"
        groups: dynamically_created_hosts
- hosts: dynamically_created_hosts
  gather_facts: false
  vars_prompt:
    - name: hostname
      prompt: Please insert hostname for new box without domain?
      private: false
      default: "ftechiz"
  vars:
    ansible_ssh_user: ftechiz
    ansible_ssh_private_key_file: "~/.ssh/id_rsa"  # Specify the path to your private key
    install: "true"
    hostname_box: "{{ hostname }}.musicinxite.com"
    cronxbmc_addon_file: "cronxbmc-0.1.6.zip"
    dateutil_addon_file: "script.module.dateutil-2.8.2.zip"
    module_six_addon_file: "script.module.six-1.15.0.zip"
    http_password: "music5673"
    http_user: "kodi"
    box_timezone: "Singapore"
    ansible_ssh_common_args: '-o UserKnownHostsFile=/dev/null' #work well
  tasks:
    - name: Gather facts
      setup:
    - name: Find out playbooks path
      delegate_to: localhost
      shell: pwd
      register: inventory_dir
    - name: Create variable for http managment
      delegate_to: localhost
      shell: echo -n '{{ http_user }}:{{ http_password }}'|base64
      register: http_token

    - name: Check openvpn keys in playbooks/roles/openvpn/fiels/keys
      delegate_to: localhost
      stat:
        path: "{{ inventory_dir.stdout }}/roles/openvpn/files/keys/{{ hostname_box }}.tar"
      register: openvpn_key
    - name: 'Check parm is null or invalid'
      fail: msg="Openvpn key file not found in {{ inventory_dir.stdout }}/roles/openvpn/files/keys/{{ hostname_box }}.tar, please download  key from https://tunnel.musicinxite.com/ , save and try again "
      when: openvpn_key.stat.exists == False

    - name: Check linux version
      shell: cat /etc/os-release |grep VERSION_ID |cut -d "\"" -f2
      register: linux_version
    - debug:
        msg: linux version = {{ linux_version.stdout }}
    - name: Get os name
      shell: "lsb_release -a |cut -d ' ' -f1|awk '{print tolower($0)}'"
      register: system
    - name: Print system details
      ansible.builtin.debug:
        msg: 'System name : {{ system.stdout }}'
    - name: Print ansible_distribution
      ansible.builtin.debug:
        msg: 'System ansible_distribution : {{ ansible_distribution }}'
    #------------------Set up openvpn
#    - name: Run OS-specific tasks for OpenVPN setup
#      include_tasks: "roles/openvpn_{{ ansible_distribution | lower }}/tasks/main.yml"
#      when: "'{{ ansible_distribution }}' in ['Arch', 'CentOS', 'Debian', 'OracleLinux', 'Fedora', 'Ubuntu']"
#      tags: os_specific_openvpn
#
#    - name: Run default OpenVPN setup if OS is not in the list
#      import_role:
#        name: openvpn_core_libre_elec
#      when: "'{{ ansible_distribution }}' not in ['Arch', 'CentOS', 'Debian', 'OracleLinux', 'Fedora', 'Ubuntu']"
#      tags: default_openvpn

    - import_role:
        name: kodi

    - name: Add hostname to config
      shell: |
        xmlstarlet edit --omit-decl -L \
        --delete  '//system/hostname' \
        --subnode '//system' --type elem --name hostname --value {{ hostname_box }} \
        --insert  '//system/hostanme' --type attr --name hostname --value {{ hostname_box }} \
        ~/.kodi/userdata/addon_data/service.{{ system.stdout }}.settings/oe_settings.xml
    - name: Restart kodi.service with new hostname
      shell: systemctl restart kodi.service
    # -----------------set up webserver
    - name: Configurate webserver and http auth
      ansible.builtin.import_role:
        name: webserver
    # -----------------------------------Configuration NTP server
    - name: Configuration NTP server
      ansible.builtin.import_role:
        name: ntpserver
    # # -----------------INSTALL-libs
    - import_role:
        name: libs
    # -----------------INSTALL-CRONXBMC
    - import_role:
        name: cronxbmc
    # # -----------------Iptables
    - import_role:
        name: iptables